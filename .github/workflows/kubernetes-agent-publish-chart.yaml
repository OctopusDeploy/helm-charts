name: Publish Kubernetes Agent chart

on:
  push:
    branches:
    - main
    paths:
    - charts/kubernetes-agent/**
    - .github/workflows/kubernetes-agent-publish-chart.yaml

  pull_request:
    branches:
    - '*'
    paths:
    - charts/kubernetes-agent/**
    - .github/workflows/kubernetes-agent-publish-chart.yaml


jobs:
  version_and_package:
    runs-on: ubuntu-latest
    outputs:
      CHART_VERSION: ${{ steps.version.outputs.CHART_VERSION  }}
      PACKAGE_NAME: ${{ steps.version.outputs.PACKAGE_NAME }}

    steps:
    - uses: actions/checkout@v4

    - name: Install Helm
      uses: azure/setup-helm@v3
      with:
        version: 'v3.13.2'

    - name: Parse Chart config
      uses: pietrobolcato/action-read-yaml@1.0.0
      id: read_chart_yaml
      with:
        config: ${{ github.workspace }}/charts/kubernetes-agent/Chart.yaml

    - name: Get branch names
      id: branch_names
      uses: OctopusDeploy/util-actions/current-branch-name@current-branch-name.0.1.0

    - name: Generate chart version
      id: version
      shell: bash
      run: |
        chart_version="${{ steps.read_chart_yaml.outputs.version }}"
        pre_release=""

        if [[ "${{steps.branch_names.outputs.branch_name}}" != "main" ]]
        then
            pre_release="-${{steps.branch_names.outputs.branch_name}}-$(date +'%Y%m%d%H%M%S')"
        fi

        full_version="$chart_version$pre_release"

        echo "CHART_VERSION=$full_version" >> $GITHUB_ENV
        echo "PACKAGE_NAME=kubernetes-agent-$full_version.tgz" >> $GITHUB_OUTPUT

    - name: Package Chart
      run: helm package './charts/kubernetes-agent' --version '${{ env.CHART_VERSION }}'

    - uses: actions/upload-artifact@v3
      name: Upload packaged chart
      with:
        name: '${{ steps.version.outputs.PACKAGE_NAME }}'
        path: '${{ github.workspace }}/kubernetes-agent-${{ env.CHART_VERSION }}.tgz'

  publish_artifactory:
    runs-on: ubuntu-latest
    # We publish to Artifactory if this is not a main commit, or if it is, that it's a versioning commit
    if: ${{ github.ref != 'refs/heads/main' || (github.ref == 'refs/heads/main' && startsWith(github.event.commits[0].message, 'Version Kubernetes Agent Chart')) }}
    needs: version_and_package
    steps:
    - name: Install Helm
      uses: azure/setup-helm@v3
      with:
        version: 'v3.13.2'

    - name: Download packaged chart
      uses: actions/download-artifact@v3
      with:
        name: '${{ needs.version_and_package.outputs.PACKAGE_NAME }}'

    - name: Login to Artifactory
      run: helm registry login ${{ secrets.ARTIFACTORY_DOCKER_REPO_HOSTNAME }} -u '${{ secrets.ARTIFACTORY_USERNAME }}' -p '${{ secrets.ARTIFACTORY_PASSWORD }}'

    - name: Push Chart to Artifactory
      run: helm push '${{ needs.version_and_package.outputs.PACKAGE_NAME }}' oci://${{ secrets.ARTIFACTORY_DOCKER_REPO_HOSTNAME }}

  publish_dockerhub:
    runs-on: ubuntu-latest
    # We only publish to docker hub if this is commit to main and the comment is a chart versioning commit
    if: ${{ github.ref == 'refs/heads/main' && startsWith(github.event.commits[0].message, 'Version Kubernetes Agent Chart') }}
    needs: version_and_package
    steps:
    - name: Install Helm
      uses: azure/setup-helm@v3
      with:
        version: 'v3.13.2'

    - name: Download packaged chart
      uses: actions/download-artifact@v3
      with:
        name: '${{ needs.version_and_package.outputs.PACKAGE_NAME }}'

    - name: Login to DockerHub
      run: helm registry login registry-1.docker.io -u '${{ secrets.DOCKERHUB_USERNAME }}' -p '${{ secrets.DOCKERHUB_TOKEN }}'

    - name: Push Chart to DockerHub
      run: helm push '${{ needs.version_and_package.outputs.PACKAGE_NAME }}' oci://registry-1.docker.io/octopusdeploy

  generate_metadata_nuget_package:
    runs-on: ubuntu-latest
    needs: version_and_package
    permissions: 
        contents: write # Required to checkout code and create tags
    steps:
      - uses: pnpm/action-setup@v3.0.0
        with:
          version: 9.*

      - name: Setup node
        uses: actions/setup-node@v4.0.2
        with:
          node-version: "20.*"
          cache: 'pnpm'

        # Why do we explicitly do pnpm install here and not use "run_install: true" above in the pnpm setup?
        # We need to have pnpm setup before node in order to take advantage of the inbuilt caching that is available
        # in that action, and running an install as part of pnpm setup won't use the cache, so we'll explicitly
        # run it here after the cache
      - run: pnpm install

      - name: Create Metadata Nuget Package
        run: pnpm generate-metadata-nuget-package

      - name: Upload nuget package artefact
        uses: actions/upload-artifact@v3
        with:
          name: Packages
          path: ./dist/*.nupkg


  publish_packages_to_octopus:
    runs-on: ubuntu-latest
    needs: [ version_and_package, generate_metadata_nuget_package ]
    permissions:
      id-token: write # Required to obtain the ID token from GitHub Actions
    env:
      OCTOPUS_SPACE: "Modern Deployments"

    steps:
    - name: Download Packages
      uses: actions/download-artifact@v3
      with:
        name: Packages
        path: ./dist/

    - name: Login to Octopus Deploy üêô
      uses: OctopusDeploy/login@v1
      with: 
        server: ${{ secrets.OCTOPUS_URL }}
        service_account_id: 8b5a7f0f-c2c9-48de-a0f6-74d83669accf

    - name: Push to Metadata Nuget Package to Octopus üêô
      uses: OctopusDeploy/push-package-action@v3
      with:
        packages: |
          ./dist/Octopus.KubernetesAgent.Metadata.${{ needs.version_and_package.outputs.CHART_VERSION }}.nupkg
          
    - name: Create Release in Octopus üêô
      uses: OctopusDeploy/create-release-action@v3
      with:
        project: "Octopus.KubernetesAgent"
        packages: |
          Octopus.KubernetesAgent.Metadata:${{ needs.version_and_package.outputs.CHART_VERSION }}