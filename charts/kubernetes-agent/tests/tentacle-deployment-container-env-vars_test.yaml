suite: "tentacle configuration"
templates:
- templates/tentacle-deployment.yaml
tests:
- it: "sets the pod polling connection count to the correct value with quoting"
  set:
    agent:
      pollingConnectionCount: 100
  asserts:
  - equal:
      path: spec.template.spec.containers[0].env[?(@.name == 'TentaclePollingConnectionCount')].value
      value: "100"

- it: "doesn't include serverSubscriptionID when not set"
  set:
    agent:
      serverSubscriptionId: ""
  asserts:
    - notContains:
        path: spec.template.spec.containers[0].env
        content:
          name: "ServerSubscriptionId"

- it: "doesn't include certificate when not set"
  set:
    agent:
      certificate: ""
  asserts:
    - notContains:
        path: spec.template.spec.containers[0].env
        content:
          name: "TentacleCertificateBase64"

- it: "Accepts EULA"
  set:
    agent:
      acceptEula: Y 
  asserts:
  - equal:
      path: spec.template.spec.containers[0].env[?(@.name == 'ACCEPT_EULA')].value
      value: "Y"
      
- it: "Sets agent name (untruncated)"
  set:
    agent:
        name: foolalar3927ghr923ry923ryh8923h8f932h8f9h329f8h32fh3oafh932hrf923hf932h8f92 
  asserts:
  - equal:
      path: spec.template.spec.containers[0].env[?(@.name == 'AgentName')].value
      value: foolalar3927ghr923ry923ryh8923h8f932h8f9h329f8h32fh3oafh932hrf923hf932h8f92

- it: "Sets server comms address (Halibut port)"
  set:
    agent:
      serverCommsAddress: http://blahblah.ocoputs.app:10943
  asserts:
  - equal:
      path: spec.template.spec.containers[0].env[?(@.name == 'ServerCommsAddress')].value
      value: http://blahblah.ocoputs.app:10943

- it: "Sets server URL"
  set:
    agent:
      serverUrl: http://blahblah.ocoputs.app
  asserts:
  - equal:
      path: spec.template.spec.containers[0].env[?(@.name == 'ServerUrl')].value
      value: http://blahblah.ocoputs.app

- it: "Sets Space"
  set:
    agent:
      space: "Modern Deployments"
  asserts:
  - equal:
      path: spec.template.spec.containers[0].env[?(@.name == 'Space')].value
      value: "Modern Deployments"
      
- it: "Sets deployment target enabled"
  set:
    agent:
      deploymentTarget:
        enabled: true
  asserts:
    - equal:
        path: spec.template.spec.containers[0].env[?(@.name == 'DeploymentTargetEnabled')].value
        value: "true"

- it: "Sets deployment target environments"
  set:
    agent:
      deploymentTarget:
        initial:
          environments: [dev, pre-prod, prod]
  asserts:
  - equal:
      path: spec.template.spec.containers[0].env[?(@.name == 'TargetEnvironment')].value
      value: "dev,pre-prod,prod"

- it: "Sets deployment target tags"
  set:
    agent:
      deploymentTarget:
        initial:
          tags: [web, admin]
  asserts:
  - equal:
      path: spec.template.spec.containers[0].env[?(@.name == 'TargetRole')].value
      value: "web,admin"

- it: "Sets worker pools"
  set:
    agent:
      worker:
        initial:
          workerPools: [WorkerPools-3, MyAwesomeWorkerPool]
  asserts:
    - equal:
        path: spec.template.spec.containers[0].env[?(@.name == 'WorkerPools')].value
        value: "WorkerPools-3,MyAwesomeWorkerPool"

- it: "Sets machine policy if specified"
  set:
    agent:
      machinePolicyName: foobar
  asserts:
  - equal:
      path: spec.template.spec.containers[0].env[?(@.name == 'MachinePolicy')].value
      value: "foobar"

- it: "No machine policy if not specified"
  asserts:
  - notExists:
      path: spec.template.spec.containers[0].env[?(@.name == 'MachinePolicy')]

- it: "Sets deployment target default Namespace"
  set:
    agent:
      deploymentTarget:
        initial:
          defaultNamespace: octopus-agent-blah
  asserts:
  - equal:
      path: spec.template.spec.containers[0].env[?(@.name == 'DefaultNamespace')].value
      value: "octopus-agent-blah"

- it: "Sets auto cleanup"
  set:
    agent:
      debug:
        disableAutoPodCleanup: true
  asserts:
  - equal:
      path: spec.template.spec.containers[0].env[?(@.name == 'OCTOPUS__K8STENTACLE__DISABLEAUTOPODCLEANUP')].value
      value: "true"

- it: "Sets log level"
  set:
    agent:
      logLevel: Verbose
  asserts:
  - equal:
      path: spec.template.spec.containers[0].env[?(@.name == 'OCTOPUS__TENTACLE__LOGLEVEL')].value
      value: "Verbose"

- it: "Sets server API key if specified"
  set:
    nameOverride: the-agent-name-lobster
    agent:
      serverApiKey: APIKEY-blkadsjfldsjflksd
  asserts:
  - equal:
      path: spec.template.spec.containers[0].env[?(@.name == 'ServerApiKey')].valueFrom
      value: 
        secretKeyRef:
          key: api-key
          name: the-agent-name-lobster-tentacle-server-auth

- it: "Sets bearer token if specified"
  set:
    nameOverride: the-agent-name-lobster
    agent:
      bearerToken: fkadjsgfjkaeuwygfkuwyafgu3gwfkua36wgfu3wgkujafghj
  asserts:
  - equal:
      path: spec.template.spec.containers[0].env[?(@.name == 'BearerToken')].valueFrom
      value: 
        secretKeyRef:
          key: bearer-token
          name: the-agent-name-lobster-tentacle-server-auth

- it: "sets polling proxy information if host ifs specified"
  set:
    agent:
      pollingProxy:
        host: "example.com"
        port: 1234
        username: "user"
        password: "pw-1234"
  asserts:
  - equal:
      path: spec.template.spec.containers[0].env[?(@.name == 'TentaclePollingProxyHost')].value
      value: "example.com"
  - equal:
      path: spec.template.spec.containers[0].env[?(@.name == 'TentaclePollingProxyPort')].value
      value: 1234
  - equal:
      path: spec.template.spec.containers[0].env[?(@.name == 'TentaclePollingProxyUsername')].value
      value: "user"
  - equal:
      path: spec.template.spec.containers[0].env[?(@.name == 'TentaclePollingProxyPassword')].valueFrom
      value: 
        secretKeyRef:
          key: polling-proxy-password
          name: octopus-agent-tentacle-server-auth

- it: "does not include polling proxy information if host is not specified"
  set:
    agent:
      pollingProxy:
        port: 1234
        username: "user"
        password: "pw-1234"
  asserts:
  - notExists:
      path: spec.template.spec.containers[0].env[?(@.name == 'TentaclePollingProxyHost')]
  - notExists:
      path: spec.template.spec.containers[0].env[?(@.name == 'TentaclePollingProxyPort')]
  - notExists:
      path: spec.template.spec.containers[0].env[?(@.name == 'TentaclePollingProxyUsername')]
  - notExists:
      path: spec.template.spec.containers[0].env[?(@.name == 'TentaclePollingProxyPassword')]

- it: "does not include polling proxy password if not specified"
  set:
    agent:
      pollingProxy:
        host: example.com
  asserts:
  - exists:
      path: spec.template.spec.containers[0].env[?(@.name == 'TentaclePollingProxyHost')]
  - notExists:
      path: spec.template.spec.containers[0].env[?(@.name == 'TentaclePollingProxyPassword')]

- it: "Sets environment variable if multiple image pull secrets set"
  set:
    imagePullSecrets:
    - name: secret-1
    - name: secret-2
  asserts:
    - equal:
        path: spec.template.spec.containers[0].env[?(@.name == 'OCTOPUS__K8STENTACLE__PODIMAGEPULLSECRETNAMES')].value
        value: "secret-1,secret-2"

- it: "Sets environment variable if single image pull secret"
  set:
    imagePullSecrets:
    - name: secret-1
  asserts:
    - equal:
        path: spec.template.spec.containers[0].env[?(@.name == 'OCTOPUS__K8STENTACLE__PODIMAGEPULLSECRETNAMES')].value
        value: "secret-1"


- it: "Sets resource json if script pods resources changed"
  set:
    scriptPods:
      resources:
        limits:
          cpu: "100m"
          memory: "1Gi"
        requests:
          cpu: "10m"
          memory: "50Mi"
  asserts:
    - equal:
        path: spec.template.spec.containers[0].env[?(@.name == 'OCTOPUS__K8STENTACLE__PODRESOURCEJSON')].value
        value: '{"limits":{"cpu":"100m","memory":"1Gi"},"requests":{"cpu":"10m","memory":"50Mi"}}'

- it: Sets script pod affinity json if script pod affinity is changed
  set:
    scriptPods:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: kubernetes.io/arch
                operator: In
                values:
                - arm64
                - amd64
  asserts:
    - equal:
        path: spec.template.spec.containers[0].env[?(@.name == 'OCTOPUS__K8STENTACLE__PODAFFINITYJSON')].value
        value: '{"nodeAffinity":{"requiredDuringSchedulingIgnoredDuringExecution":{"nodeSelectorTerms":[{"matchExpressions":[{"key":"kubernetes.io/arch","operator":"In","values":["arm64","amd64"]}]}]}}}'

- it: Sets pod tolerations json if script pod tolerations defined
  set:
    scriptPods:
      tolerations:
      - key: "tol-1"
        operator: "Equal"
        value: "val-1"
        effect: "NoSchedule"
      - key: "tol-21"
        operator: "Equal"
        value: "val-2"
        effect: "NoSchedule"
  asserts:
    - equal:
        path: spec.template.spec.containers[0].env[?(@.name == 'OCTOPUS__K8STENTACLE__PODTOLERATIONSJSON')].value
        value: '[{"effect":"NoSchedule","key":"tol-1","operator":"Equal","value":"val-1"},{"effect":"NoSchedule","key":"tol-21","operator":"Equal","value":"val-2"}]'

- it: "Sets Image Pod from DeploymentTarget Values if DeploymentTarget is enabled"
  set:
    agent.deploymentTarget.enabled: true
    agent.worker.enabled: false
    scriptPods.deploymentTarget.image:
      repository: "deployment_target_image_repository"
      tag: "1.0.0-deploymentTarget"
      pullPolicy: "Always"
    scriptPods.worker.image:
      repository: "should_not_use_this"
      tag: "should_not_use_this"
      pullPolicy: "should_not_use_this"
  asserts:
    - equal:
        path: spec.template.spec.containers[0].env[?(@.name == 'OCTOPUS__K8STENTACLE__SCRIPTPODIMAGE')].value
        value: "deployment_target_image_repository"
    - equal:
        path: spec.template.spec.containers[0].env[?(@.name == 'OCTOPUS__K8STENTACLE__SCRIPTPODIMAGETAG')].value
        value: "1.0.0-deploymentTarget"
    - equal:
        path: spec.template.spec.containers[0].env[?(@.name == 'OCTOPUS__K8STENTACLE__SCRIPTPODIMAGEPULLPOLICY')].value
        value: "Always"

- it: "Sets Image Pod from Worker Values if Worker is enabled"
  set:
    agent.deploymentTarget.enabled: false
    agent.worker.enabled: true
    scriptPods.deploymentTarget.image:
      repository: "should_not_use_this"
      tag: "should_not_use_this"
      pullPolicy: "should_not_use_this"
    scriptPods.worker.image:
      repository: "worker_image_repository"
      tag: "1.0.0-worker"
      pullPolicy: "IfNotPresent"
  asserts:
    - equal:
        path: spec.template.spec.containers[0].env[?(@.name == 'OCTOPUS__K8STENTACLE__SCRIPTPODIMAGE')].value
        value: "worker_image_repository"
    - equal:
        path: spec.template.spec.containers[0].env[?(@.name == 'OCTOPUS__K8STENTACLE__SCRIPTPODIMAGETAG')].value
        value: "1.0.0-worker"
    - equal:
        path: spec.template.spec.containers[0].env[?(@.name == 'OCTOPUS__K8STENTACLE__SCRIPTPODIMAGEPULLPOLICY')].value
        value: "IfNotPresent"

- it: "When running as a worker, the script-pod image fields are already populated"
  set:
    agent.deploymentTarget.enabled: false
    agent.worker.enabled: true
  asserts:
    - equal:
        path: spec.template.spec.containers[0].env[?(@.name == 'OCTOPUS__K8STENTACLE__SCRIPTPODIMAGE')].value
        value: "octopusdeploy/worker-tools"
    - equal:
        path: spec.template.spec.containers[0].env[?(@.name == 'OCTOPUS__K8STENTACLE__SCRIPTPODIMAGETAG')].value
        value: "ubuntu.22.04"
    - equal:
        path: spec.template.spec.containers[0].env[?(@.name == 'OCTOPUS__K8STENTACLE__SCRIPTPODIMAGEPULLPOLICY')].value
        value: "IfNotPresent"
        
- it: "When running as a deployment Target, script pod image is not set by default"
  set:
    agent.deploymentTarget.enabled: true
    agent.worker.enabled: false
  asserts:
    - notExists:
        path: spec.template.spec.containers[0].env[?(@.name == 'OCTOPUS__K8STENTACLE__SCRIPTPODIMAGE')].value