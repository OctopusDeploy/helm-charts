{{/* vim: set filetype=mustache: */}}
{{/*
Expand the name of the chart.
*/}}
{{- define "octopus.name" -}}
{{- default "octopus-deploy" .Values.nameOverride | trunc 63 | trimSuffix "-" -}}
{{- end -}}

{{/*
Create a default fully qualified app name.
We truncate at 63 chars because some Kubernetes name fields are limited to this (by the DNS naming spec).
If release name contains chart name it will be used as a full name.
*/}}
{{- define "octopus.fullname" -}}
{{- if .Values.fullnameOverride -}}
{{- .Values.fullnameOverride | trunc 63 | trimSuffix "-" -}}
{{- else -}}
{{- $name := default "octopus-deploy" .Values.nameOverride -}}
{{- if contains $name .Release.Name -}}
{{- .Release.Name | trunc 63 | trimSuffix "-" -}}
{{- else -}}
{{- printf "%s-%s" .Release.Name $name | trunc 63 | trimSuffix "-" -}}
{{- end -}}
{{- end -}}
{{- end -}}

{{/*
Create chart name and version as used by the chart label.
*/}}
{{- define "octopus.chart" -}}
{{- printf "%s-%s" .Chart.Name .Chart.Version | replace "+" "_" | trunc 63 | trimSuffix "-" -}}
{{- end -}}

{{/*
Common Labels 
*/}}
{{- define "labels" -}}
app.kubernetes.io/name: {{ include "octopus.name" . }}
helm.sh/chart: {{ include "octopus.chart" . }}
app.kubernetes.io/instance: {{ .Release.Name }}
app.kubernetes.io/managed-by: {{ .Release.Service }}
{{- end -}}

{{/* Selector Labels for octopus */}}
{{- define "octopus.selectorLabels" -}}
{{include "labels" . }}
app.kubernetes.io/component: octopus-server
{{- end -}}

{{/*
The name of the service account to use
*/}}
{{- define "octopus.serviceAccountName" -}}
{{- if .Values.octopus.serviceAccount.create -}}
{{ default (include "octopus.fullname" .) .Values.octopus.serviceAccount.name }}
{{- else -}}
{{ default "default" .Values.octopus.serviceAccount.name }}
{{- end -}}
{{- end -}}

{{/*
Allows the acceptEULA value to accept a bool or string. 
"N" will reject the EULA.  "Y" or any truthy value will accept it.
*/}}
{{- define "octopus.acceptEulaStr" -}}
{{- and (ne (toString .Values.octopus.acceptEula) "N") (or (eq (toString .Values.octopus.acceptEula) "Y") (eq .Values.octopus.acceptEula true)) | ternary "Y" "N" | quote   -}}
{{- end -}}

{{/*
Templates out the server host to be used if the mssql subchart is enabled
*/}}
{{- define "octopus.mssql.server" -}}
{{- printf "%s-0.%s" (include "mssql.name" .) (include "mssql.fullname" .) -}}
{{- end -}}

{{/*
Allows us to generate random passwords to store in k8s secrets
Takes a list as its parameter
Item 0 = current root
Item 1 = secret name
*/}}
{{- define "generate_secret" -}}
{{- $root := index . 0 -}}
{{- $secretName := index . 1 -}}
{{- if not (index $root.Release "generatedSecrets") -}}
{{-   $_ := set $root.Release "generatedSecrets" dict -}}
{{- end -}}
{{- $key := printf "%s-%s" $root.Release.Name $secretName -}}
{{- if not (index $root.Release.generatedSecrets $key) -}}
{{-   if eq $secretName "masterkey" -}}
{{-     $_ := set $root.Release.generatedSecrets $key (randAscii 16 | b64enc) -}}
{{-   else -}}
{{-     $_ := set $root.Release.generatedSecrets $key (randAlphaNum 32) -}}
{{-   end -}}
{{- end -}}
{{- /* Retrieve previously generated value. */ -}}
{{- index $root.Release.generatedSecrets $key -}}
{{- end -}}


{{/*
Retrieves a secret from the k8s cluster and returns the value of the key
If the secret doesn't exist, the secret is autogenerated to be stored in the cluster
Takes a list as its parameter
Item 0 = current root
Item 1 = secret name
*/}}
{{- define "random_secret" -}}
{{- $root := index . 0 -}}
{{- $secret := index . 1 -}}
{{- $secretName := printf "%s-%s" $root.Release.Name $secret -}}
{{- $d := "" -}}
{{- $data := default dict (lookup "v1" "Secret" $root.Release.Namespace $secretName).data -}}
{{- if $data -}}
{{-   if not (index $root.Release "generatedSecrets") -}}
{{-     $_ := set $root.Release "generatedSecrets" dict -}}
{{-   end -}}
{{-   $_ := set $root.Release.generatedSecrets $secretName (index $data.secret | b64dec) -}}
{{-   index $data.secret | b64dec -}}
{{- else -}}
{{- (include "generate_secret" .) -}}
{{- end -}}
{{- end -}}

{{/*
If mssql is enabled, this template will return the password - either from values or autogenerated
*/}}
{{- define "octopus.mssql.password" -}}
{{- if .Values.mssql.SA_PASSWORD -}}
{{- .Values.mssql.SA_PASSWORD -}}
{{- else -}}
{{- include "random_secret" (list . "sapassword") -}}
{{- end -}}
{{- end -}}

{{/*
Templates out the database connection string to be used if the mssql subchart is enabled
*/}}
{{- define "octopus.mssql.connectionString" -}}
{{ if .Values.mssql.enabled }}
{{- printf "Server=%s;Initial Catalog=OctopusDeploy;Persist Security Info=False;User ID=SA;Password=%s;Encrypt=True;Connection Timeout=30;" (include "octopus.mssql.server" .) (include "octopus.mssql.password" .) -}}
{{ else }}
{{- required "When not using the default in-cluster db (mssql.enabled=true), database connection string must be provided" .Values.octopus.databaseConnectionString -}}
{{- end -}}
{{- end -}}


{{/*
Templates out extra environment variables to be used
*/}}
{{- define "octopus.extraEnv" -}}
{{- if .Values.octopus.extraEnv -}}
{{- toYaml .Values.octopus.extraEnv -}}
{{- end -}}
{{- end -}}