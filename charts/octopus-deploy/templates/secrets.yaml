{{/* 
Conditionally add secrets to be autogenerated if they are not set in the values.yaml file
$_ := set $secrets "sapassword" ""
  sets the sapassword key in the $secrets dictionary to be blank - this indicates it needs to be generated 
  "$_ :=" simply stops the output from set being printed and making its way to the generated files
*/}}

{{- if .Values.octopus.createSecrets -}}
{{- $secrets := dict -}}
  
{{/* MSSQL SA Password - only set if using inbuilt mssql */}}
{{- if and .Values.mssql.enabled (not .Values.mssql.SA_PASSWORD) }}
{{- $_ := set $secrets "sapassword" "" -}}
{{- end }}

{{/* Master Key */}}
{{- if not .Values.octopus.masterKey }}
{{- $_ := set $secrets "masterkey" "" }}
{{- else }}
{{- $_ := set $secrets "masterkey" .Values.octopus.masterKey }}
{{- end }}

{{/* Octopus Password */}}
{{- if not .Values.octopus.password }}
{{- $_ := set $secrets "adminpassword" "" }}
{{- else }}
{{- $_ := set $secrets "adminpassword" .Values.octopus.password }}
{{- end }}

{{/* Connection String */}}
{{- $_ := set $secrets "connectionstring" (include "octopus.mssql.connectionString" .) }}

{{/* Admin username */}}
{{- $_ = set $secrets "adminusername" (default "admin" .Values.octopus.username) }}
  
{{/* License Key */}}
{{- if .Values.octopus.licenseKeyBase64 }}
{{- $_ := set $secrets "licensekey" .Values.octopus.licenseKeyBase64 }}
{{- end }}

{{- range $secretName, $secretValue := $secrets }}
---
apiVersion: v1
kind: Secret
type: opaque
metadata:
  name: {{printf "%s-%s" $.Release.Name $secretName }}
  labels:
    {{- include "labels" $ | nindent 4 }}
data:
  {{- if not $secretValue }}
  secret: {{ include "random_secret" (list $ $secretName) | b64enc }}
  {{- else }}
  secret: {{ $secretValue | b64enc }}
  {{- end }}
{{- end }}
{{- end }}