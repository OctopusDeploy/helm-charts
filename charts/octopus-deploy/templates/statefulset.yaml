# Octopus Deploy server nodes are modeled as StatefulSet, as terminating a node while deployments or runbooks are executing will cause these tasks to be terminated
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ template "octopus.fullname" . }}
  {{- if .Values.octopus.statefulSet.annotations }}
  annotations:
  {{- toYaml .Values.octopus.statefulSet.annotations | nindent 4 }}
  {{- end }}
  labels:
  {{- include "labels" . | nindent 4 }}
  {{- if .Values.octopus.statefulSet.labels }}
  {{- toYaml .Values.octopus.statefulSet.labels | nindent 4 }}
  {{- end }}
spec:
  selector:
    matchLabels:
    {{- include "octopus.selectorLabels" . | nindent 6 }}
  serviceName: {{ template "octopus.fullname" . }}
  replicas: {{.Values.octopus.replicaCount}}
  template:
    metadata:
      labels:
      {{- include "octopus.selectorLabels" . | nindent 8 }}
      {{- if .Values.octopus.pods.labels }}
      {{- toYaml .Values.octopus.pods.labels | nindent 8 }}
      {{- end }}
      {{- if .Values.octopus.pods.annotations }}
      annotations:
      {{- toYaml .Values.octopus.pods.annotations | nindent 8 }}
      {{- end }}
    spec:
      {{- with .Values.octopus.podSecurityContext }}
      securityContext:
      {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ template "octopus.serviceAccountName" . }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
      {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.octopus.topologySpreadConstraints }}
      topologySpreadConstraints:
      {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
      {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.octopus.tolerations }}
      tolerations:
      {{- toYaml . | nindent 8 }}
      {{- end }}
      containers:
      - name: octopus
        image: "{{ .Values.octopus.image.repository }}:{{ default .Chart.AppVersion .Values.octopus.image.tag }}"
        securityContext:
          {{- with .Values.octopus.containerSecurityContext }}
          {{- toYaml . | nindent 10 }}
          {{- end }}
          {{- if .Values.octopus.enableDockerInDocker }}
          privileged: true
          {{- end }}
        env:
          - name: ACCEPT_EULA
            value: {{ template "octopus.acceptEulaStr" . }} 
          - name: OCTOPUS_SERVER_NODE_NAME
            valueFrom:
              fieldRef:
                fieldPath: metadata.name
          {{- if .Values.octopus.serverConfigurationDirectory }}
          - name: OCTOPUS_SERVER_CONFIGURATION_DIRECTORY
            value: {{ .Values.octopus.serverConfigurationDirectory }}
          - name: USER
            value: octopus
          {{- end}}
          - name: DB_CONNECTION_STRING
            valueFrom:
              secretKeyRef:
                name: {{printf "%s-%s" $.Release.Name "connectionstring"}}
                key: secret
          - name: ADMIN_USERNAME
            valueFrom:
              secretKeyRef:
                name: {{printf "%s-%s" $.Release.Name "adminusername"}}
                key: secret
          - name: ADMIN_PASSWORD
            valueFrom:
              secretKeyRef:
                name: {{printf "%s-%s" $.Release.Name "adminpassword"}}
                key: secret
          - name: ADMIN_EMAIL
            value: {{.Values.octopus.email}}
          - name: TASK_CAP
            value: !!str {{.Values.octopus.taskCap}}
          {{- if or .Values.octopus.licenseKeyBase64 (not .Values.octopus.createSecrets) }}
          - name: OCTOPUS_SERVER_BASE64_LICENSE
            # Your license key goes here. When using more than one node, a HA license is required.
            # Without a HA license, the stateful set can have a replica count of 1.
            valueFrom:
              secretKeyRef:
                name: {{printf "%s-%s" $.Release.Name "licensekey"}}
                key: secret
          {{- end}}
          - name: MASTER_KEY
            valueFrom:
              secretKeyRef:
                name: {{printf "%s-%s" $.Release.Name "masterkey"}}
                key: secret
        {{- if not .Values.octopus.enableDockerInDocker }}
          - name: DISABLE_DIND
            value: !!str "Y"
        {{- end }}
          - name: OCTOPUS_INSTALLED_VIA_HELM 
            value: "true"
        {{- if .Values.octopus.proxy.http }}
          - name: HTTP_PROXY
            value: {{ .Values.octopus.proxy.http | quote }}
        {{- end }}
        {{- if .Values.octopus.proxy.https }}
          - name: HTTPS_PROXY
            value: {{ .Values.octopus.proxy.https | quote }}
        {{- end }}
        {{- if .Values.octopus.proxy.all }}
          - name: ALL_PROXY
            value: {{ .Values.octopus.proxy.all | quote }}
        {{- end }}
        {{- if .Values.octopus.proxy.excludedHostnames }}
          - name: NO_PROXY
            value: {{ join "," .Values.octopus.proxy.excludedHostnames | quote }}
        {{- end }}
        ports:
          - containerPort: 8080
            name: web
          - containerPort: 10943
            name: tentacle
        volumeMounts:
          - name: package-repository-volume
            mountPath: /repository
          - name: artifacts-volume
            mountPath: /artifacts
          - name: task-log-volume
            mountPath: /taskLogs
          - name: server-log-volume
            mountPath: /home/octopus/.octopus/OctopusServer/Server/Logs
          - name: audit-log-volume
            mountPath: /eventExports
        {{- if .Values.octopus.resources }}
        resources:
        {{- toYaml .Values.octopus.resources | nindent 10 }}
        {{- end }}
        readinessProbe:
          exec:
            command:
              - /bin/bash
              - -c
              - URL=http://localhost:8080; response=$(/usr/bin/curl -k $URL/api/serverstatus/hosted/internal --write-out %{http_code} --silent --output /dev/null); /usr/bin/test "$response" -ge 200 && /usr/bin/test "$response" -le 299 || /usr/bin/test
          initialDelaySeconds: 30
          periodSeconds: 30
          timeoutSeconds: 5
          failureThreshold: 60
        livenessProbe:
          exec:
            command:
              - /bin/bash
              - -c
              - URL=http://localhost:8080; response=$(/usr/bin/curl -k $URL/api/octopusservernodes/ping --write-out %{http_code} --silent --output /dev/null); /usr/bin/test "$response" -ge 200 && /usr/bin/test "$response" -le 299 || /usr/bin/test "$response" -eq 418
          periodSeconds: 30
          timeoutSeconds: 5
          failureThreshold: 10
        startupProbe:
          exec:
            command:
              - /bin/bash
              - -c
              - URL=http://localhost:8080; response=$(/usr/bin/curl -k $URL/api/octopusservernodes/ping --write-out %{http_code} --silent --output /dev/null); /usr/bin/test "$response" -ge 200 && /usr/bin/test "$response" -le 299 || /usr/bin/test "$response" -eq 418
          failureThreshold: 30
          periodSeconds: 60
      terminationGracePeriodSeconds: 10
      volumes:
        - name: package-repository-volume
          persistentVolumeClaim:
            claimName: package-repository-claim
        - name: artifacts-volume
          persistentVolumeClaim:
            claimName: artifacts-claim
        - name: task-log-volume
          persistentVolumeClaim:
            claimName: task-log-claim
        - name: audit-log-volume
          persistentVolumeClaim:
            claimName: audit-log-claim
      {{- if .Values.dockerHub.login }}
      imagePullSecrets:
        - name: dockerhubcreds
      {{- end }}
  volumeClaimTemplates:
    - metadata:
        name: server-log-volume
      spec:
        accessModes: [ "ReadWriteOnce" ]
        {{- if (eq "-" (.Values.octopus.serverLogVolume.storageClassName | toString)) }}
        storageClassName: ""
        {{- else if .Values.octopus.serverLogVolume.storageClassName }}
        storageClassName: "{{ .Values.octopus.serverLogVolume.storageClassName }}"
        {{- end }}
        resources:
          requests:
            storage: {{.Values.octopus.serverLogVolume.size}}